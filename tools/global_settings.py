# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Calculator GSD - Drone Model: you can create a new Drone Model - JSON File

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-07-04
        copyright            : (C) 2025 by Prof Cazaroli and Leandro França and Prof Ilton
        email                : contato@geoone.com.br
***************************************************************************/
"""

__author__ = 'Prof Cazaroli and Leandro França and Prof Ilton'
__date__ = '2025-07-04'
__copyright__ = '(C) 2025 by Prof Cazaroli and Leandro França and Prof Ilton'
__revision__ = '$Format:%H$'

from PyQt5.QtWidgets import (QGroupBox, QWidget, QFormLayout, QVBoxLayout, QLineEdit, QLabel, QPushButton, QMessageBox)
from PyQt5.QtCore import Qt
import os
import json
import math
from functools import lru_cache
from qgis.core import QgsProject

# Path to the drone_data.json file
DRONE_DATA_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'docs', 'drone_data.json')

@lru_cache(maxsize=None) # check JSON file
def get_drone_feature(modelo):
    try:
        with open(DRONE_DATA_PATH, 'r', encoding='utf-8') as f:
            drone_data = json.load(f)
    except FileNotFoundError:
        raise ValueError(f"Drone data file not found: {DRONE_DATA_PATH}")
    except json.JSONDecodeError:
        raise ValueError(f"Error decoding JSON in {DRONE_DATA_PATH}. Check formatting.")

    dados = drone_data.get(modelo)
    if not dados:
        raise ValueError(f"Drone model'{modelo}' not found in data.")

    # Convert empty strings to None or 0/float as appropriate
    for key, value in dados.items():
        if isinstance(value, str) and value.strip() == '':
            dados[key] = None # Or 0, depending on expected type for calculations
        # Attempt to convert to float if it looks like a number
        elif isinstance(value, str):
            try:
                dados[key] = float(value.replace(',', '.'))
            except ValueError:
                pass # Keep as string if not a number
    
    return dados

class GlobalSettings:
    def __init__(self):
        self.project = QgsProject.instance()
        self.valid_project = self._validate_project()

    def _validate_project(self):
        return self.project.customVariables().get("own") == "GeoOne"

def create_add_sensor_section(dock): # inside: 1.1 Drone Model - you can create a new Drone Model
    group = QGroupBox("Add Custom Sensor/Drone")
    group.setCheckable(True)

    content_widget = QWidget()
    layout = QFormLayout(content_widget)

    dock.custom_drone_name = QLineEdit()
    dock.custom_pixel_size = QLineEdit()
    dock.custom_focal_length = QLineEdit()
    dock.custom_resolution_width = QLineEdit()
    dock.custom_resolution_height = QLineEdit()
    dock.custom_min_angle_cam = QLineEdit() 
    dock.custom_max_angle_cam = QLineEdit() 
    dock.sensor_width_result = QLabel("Sensor Width: -")
    dock.sensor_height_result = QLabel("Sensor Height: -")

    btn_calculate = QPushButton("Calculate and Add")
    btn_calculate.clicked.connect(lambda: calculate_and_add_drone(dock))

    layout.addRow("Drone/Sensor Name:", dock.custom_drone_name)
    layout.addRow("Pixel Size (mm):", dock.custom_pixel_size)
    layout.addRow("Focal Length (mm):", dock.custom_focal_length)
    layout.addRow("Image Width (px):", dock.custom_resolution_width)
    layout.addRow("Image Height (px):", dock.custom_resolution_height)
    layout.addRow("Min. Camera Angle (º):", dock.custom_min_angle_cam) 
    layout.addRow("Max. Camera Angle (º):", dock.custom_max_angle_cam) 
    layout.addRow(btn_calculate)
    layout.addRow(dock.sensor_width_result)
    layout.addRow(dock.sensor_height_result)

    group_main_layout = QVBoxLayout()
    group_main_layout.addWidget(content_widget)
    group.setLayout(group_main_layout)
    group.toggled.connect(content_widget.setVisible)
    group.setChecked(False)

    return group

def calculate_and_add_drone(dock): # bottom Calculate and Add
    try:
        drone_name = dock.custom_drone_name.text().strip()
        if not drone_name:
            QMessageBox.warning(dock, "Error", "Drone name cannot be empty.")
            return

        # Get values, convert to float/int, or None if empty
        pixel_size = float(dock.custom_pixel_size.text().replace(',', '.')) if dock.custom_pixel_size.text().strip() else None
        focal_length = float(dock.custom_focal_length.text().replace(',', '.')) if dock.custom_focal_length.text().strip() else None
        image_width = int(dock.custom_resolution_width.text()) if dock.custom_resolution_width.text().strip() else None
        image_height = int(dock.custom_resolution_height.text()) if dock.custom_resolution_height.text().strip() else None
        min_angle_cam = float(dock.custom_min_angle_cam.text().replace(',', '.')) if dock.custom_min_angle_cam.text().strip() else -90 # Default
        max_angle_cam = float(dock.custom_max_angle_cam.text().replace(',', '.')) if dock.custom_max_angle_cam.text().strip() else 0 # Default

        # Calculate sensor_width and sensor_height if possible
        sensor_width = None
        sensor_height = None

        if pixel_size is not None and image_width is not None:
            sensor_width = pixel_size * image_width

        if pixel_size is not None and image_height is not None:
            sensor_height = pixel_size * image_height

        # Load existing data
        try:
            with open(DRONE_DATA_PATH, 'r', encoding='utf-8') as f:
                drone_data = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            drone_data = {} # Start with empty if file is missing or corrupted

        if drone_name in drone_data:
            reply = QMessageBox.question(dock, "Existing Drone",
                                         f"The drone '{drone_name}' already exists. Do you want to overwrite?",
                                         QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
            if reply == QMessageBox.No:
                return

        new_drone_entry = {
            "pixel_size": pixel_size,
            "sensor_width": sensor_width,
            "sensor_height": sensor_height,
            "focal_length": focal_length,
            "image_width": image_width,
            "image_height": image_height,
            "min_angle_cam": min_angle_cam,
            "max_angle_cam": max_angle_cam
        }

        drone_data[drone_name] = new_drone_entry

        with open(DRONE_DATA_PATH, 'w', encoding='utf-8') as f: # Save updated drone data
            json.dump(drone_data, f, indent=4)

        # Clear cache and refresh UI
        clear_drone_cache() # This function is defined at the end of this file
        
        # Refresh the combo box in the main dock
        dock.combo_drone.blockSignals(True) # Block signals to prevent update_drone_fields from being called prematurely
        dock.combo_drone.clear()
        dock.combo_drone.addItem("Select a Sensor for calculations in this plugin")
        dock.combo_drone.setItemData(0, Qt.red, Qt.TextColorRole)
        dock.combo_drone.setItemData(0, True, Qt.FontRole)
        
        try:
            with open(DRONE_DATA_PATH, 'r', encoding='utf-8') as f:
                updated_drone_models = json.load(f)
            for model in sorted(updated_drone_models.keys()):
                dock.combo_drone.addItem(model)
        except Exception as e:
            QMessageBox.warning(dock, "Error", f"Error reloading drones: {e}")
        finally:
            dock.combo_drone.blockSignals(False) # Unblock signals
            dock.combo_drone.setCurrentText(drone_name) # Select the newly added drone

        # Update calculated sensor dimensions in UI
        dock.sensor_width_result.setText(f"Sensor Width: {sensor_width:.3f} mm" if sensor_width is not None else "Sensor Width: -")
        dock.sensor_height_result.setText(f"Sensor Height: {sensor_height:.3f} mm" if sensor_height is not None else "Sensor Height: -")

        QMessageBox.information(dock, "Success", f"Drone '{drone_name}' added/updated successfully!")

        # Clear input fields
        dock.custom_drone_name.clear()
        dock.custom_pixel_size.clear()
        dock.custom_focal_length.clear()
        dock.custom_resolution_width.clear()
        dock.custom_resolution_height.clear()
        dock.custom_min_angle_cam.clear()
        dock.custom_max_angle_cam.clear()

    except ValueError as e:
        QMessageBox.warning(dock, "Input Error", f"Check the entered values: {e}")
    except Exception as e:
        QMessageBox.critical(dock, "Unexpected Error", f"An error occurred: {e}")

def clear_drone_cache():
    get_drone_feature.cache_clear()