# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Flight Planner - A QGIS plugin

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-11-05
        copyright            : (C) 2024 by Prof Cazaroli e Leandro França
        email                : contato@geoone.com.br
***************************************************************************/
"""

__author__ = 'Prof Cazaroli e Leandro França'
__date__ = '2024-11-05'
__copyright__ = '(C) 2024 by Prof Cazaroli e Leandro França'

import os
import importlib

from qgis.PyQt.QtWidgets import QAction, QMenu, QMessageBox
from qgis.PyQt.QtGui import QIcon
from qgis.core import QgsApplication
from qgis.utils import iface

from .PlanoVoo_provider import PlanoVooProvider

class GeoFlightPlanner:
    def __init__(self, iface):
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        self.menu = None
        self.actions = []
        self.provider = None

    def initGui(self):
        # Register the processing provider
        self.provider = PlanoVooProvider()
        QgsApplication.processingRegistry().addProvider(self.provider)

        icon_dir = os.path.join(self.plugin_dir, "images")

        # Create the main plugin menu only once
        self.menu = self.iface.mainWindow().findChild(QMenu, "GeoFlight Planner")
        if not self.menu:
            self.menu = QMenu("GeoFlight Planner", self.iface.mainWindow())
            self.menu.setObjectName("GeoFlight Planner")
            self.iface.mainWindow().menuBar().addMenu(self.menu)

        # Clear previous actions if plugin was reloaded
        self.menu.clear()

        # Create submenus
        horizontal_menu = QMenu("Horizontal Flight Plan", self.menu)
        vertical_menu = QMenu("Vertical Flight Plan", self.menu)

        # Add Calculator action directly to main menu
        self._add_action("GSD Calculator", self._open_calculator, icon_path=os.path.join(icon_dir, "GeoFlightPlanner.png"))

        # Add Horizontal submenu actions
        self._add_action("Manual", lambda: self._run_algorithm("Flight_Plan_H_Manual"), horizontal_menu, os.path.join(icon_dir, "Horizontal.png"))
        self._add_action("Manual RC2", lambda: self._run_algorithm("Flight_Plan_H_Manual_RC2_Controler"), horizontal_menu, os.path.join(icon_dir, "Horizontal.png"))
        self._add_action("Sensor", lambda: self._run_algorithm("Flight_Plan_H_Sensor"), horizontal_menu, os.path.join(icon_dir, "Horizontal.png"))

        # Add Vertical submenu actions
        self._add_action("Circular", lambda: self._run_algorithm("Flight_Plan_V_C"), vertical_menu, os.path.join(icon_dir, "Circular.jpg"))
        self._add_action("Facade", lambda: self._run_algorithm("Flight_Plan_V_F"), vertical_menu, os.path.join(icon_dir, "Facade.jpg"))

        # Add submenus to main menu
        self.menu.addMenu(horizontal_menu)
        self.menu.addMenu(vertical_menu)

    def unload(self):
        # Remove all actions from the menu and toolbar
        for action in self.actions:
            self.iface.removePluginMenu("GeoFlight Planner", action)
            self.iface.removeToolBarIcon(action)

        # Remove the plugin menu if it exists
        try:
            if self.menu and self.menu.menuAction():
                self.iface.mainWindow().menuBar().removeAction(self.menu.menuAction())
        except RuntimeError:
            pass  # menu was already deleted
        finally:
            self.menu = None

        # Unregister the processing provider safely
        try:
            QgsApplication.processingRegistry().removeProvider(self.provider)
        except RuntimeError:
            pass  # Provider already deleted by QGIS internally
        finally:
            self.provider = None

    def _add_action(self, label, callback, parent_menu=None, icon_path=None):
        if icon_path and os.path.exists(icon_path):
            icon = QIcon(icon_path)
            action = QAction(icon, label, self.iface.mainWindow())
        else:
            action = QAction(label, self.iface.mainWindow())

        action.triggered.connect(callback)
        self.actions.append(action)
        if parent_menu:
            parent_menu.addAction(action)
        else:
            self.iface.addPluginToMenu("GeoFlight Planner", action)
            if self.menu:
                self.menu.addAction(action)

    def _open_calculator(self):
        try:
            from .calculator.calculators import CalculadoraDialog
            dlg = CalculadoraDialog(self.iface)
            dlg.exec_()
        except Exception as e:
            QMessageBox.critical(None, "Error", f"Error opening calculator:\n{str(e)}")

    def _run_algorithm(self, algorithm_name):
        try:
            from qgis import processing
            algorithm_id = f"GeoFlightPlanner:{algorithm_name}"
            processing.execAlgorithmDialog(algorithm_id)
        except Exception as e:
            QMessageBox.critical(None, "Error", f"Error executing algorithm:\n{str(e)}")
