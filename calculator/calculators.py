# -*- coding: utf-8 -*-

"""
/******************************************************************************************
 Calculator GSD
 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-07-04
        copyright            : (C) 2025 by Prof Cazaroli and Leandro França and Prof Ilton
        email                : contato@geoone.com.br
******************************************************************************************/
"""

__author__ = 'Prof Cazaroli and Leandro França and Prof Ilton'
__date__ = '2025-07-04'
__copyright__ = '(C) 2025 by Prof Cazaroli and Leandro França and Prof Ilton'
__revision__ = '$Format:%H$'

import os
import json
import math
from functools import lru_cache
from qgis.PyQt.QtWidgets import QAction, QDialog, QFormLayout, QLabel, QComboBox, QLineEdit, QPushButton, QVBoxLayout, QMessageBox
from qgis.utils import iface


@lru_cache(maxsize=None)
def get_drone_feature(modelo):
    path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'calculator', 'drone_data.json')
    try:
        with open(path, 'r', encoding='utf-8') as f:
            drone_data = json.load(f)
    except FileNotFoundError:
        raise ValueError(f"Drone data file not found: {path}")
    except json.JSONDecodeError:
        raise ValueError(f"Error decoding JSON in {path}.")

    dados = drone_data.get(modelo)
    if not dados:
        raise ValueError(f"Drone model '{modelo}' not found in data.")

    for key, value in dados.items():
        if isinstance(value, str):
            value = value.strip()
            if value == '':
                dados[key] = None
            else:
                try:
                    dados[key] = float(value.replace(',', '.'))
                except ValueError:
                    pass
    return dados

def get_numeric_value(text_input, name, target_type=float, allow_empty=False):
    text = text_input.text().strip().replace(',', '.')
    if not text:
        if allow_empty:
            return None
        else:
            raise ValueError(f"The field '{name}' cannot be empty.")
    try:
        return target_type(text)
    except ValueError:
        raise ValueError(f"Invalid value for '{name}': '{text}'. Please enter a valid number.")

def calculate_gsd_by_sensor(drone_model, altitude_m):
    data = get_drone_feature(drone_model)
    sensor_width_mm = data.get("sensor_width")
    image_width_px = data.get("image_width")
    focal_length_mm = data.get("focal_length")

    if None in (sensor_width_mm, image_width_px, focal_length_mm):
        raise ValueError("Missing required drone data (sensor_width, image_width, focal_length).")
    if image_width_px == 0 or focal_length_mm == 0:
        raise ValueError("Invalid drone parameters: division by zero.")

    pixel_size_mm = sensor_width_mm / image_width_px
    gsd_m = (pixel_size_mm / focal_length_mm) * altitude_m
    return gsd_m * 100  # cm/pixel

def calculate_spacing(drone_model, altitude_m, perc_lat, perc_front, camera_orientation):
    data = get_drone_feature(drone_model)
    sw = data.get("sensor_width")
    sh = data.get("sensor_height")
    f = data.get("focal_length")

    if None in (sw, sh, f):
        raise ValueError("Missing required drone data (sensor dimensions or focal length).")
    if f == 0:
        raise ValueError("Focal length cannot be zero.")

    if camera_orientation.lower() == "retrato":
        sw, sh = sh, sw

    gsw = (sw * altitude_m) / f
    gsh = (sh * altitude_m) / f

    lateral_spacing = gsw * (1 - perc_lat / 100)
    frontal_spacing = gsh * (1 - perc_front / 100)

    return {
        "lateral_spacing": round(lateral_spacing, 2),
        "frontal_spacing": round(frontal_spacing, 2)
    }

def calculate_overlap(drone_model, altitude_m, spacing_lines, spacing_photos, camera_orientation):
    data = get_drone_feature(drone_model)
    sw = data.get("sensor_width")
    sh = data.get("sensor_height")
    f = data.get("focal_length")

    if None in (sw, sh, f):
        raise ValueError("Missing required drone data (sensor dimensions or focal length).")
    if f == 0:
        raise ValueError("Focal length cannot be zero.")

    if camera_orientation.lower() == "retrato":
        sw, sh = sh, sw

    gsw = (sw * altitude_m) / f
    gsh = (sh * altitude_m) / f

    overlap_lat = (1 - spacing_photos / gsw) * 100
    overlap_front = (1 - spacing_lines / gsh) * 100

    overlap_lat = max(0, min(overlap_lat, 100))
    overlap_front = max(0, min(overlap_front, 100))

    return {
        "lateral_overlap": round(overlap_lat, 2),
        "frontal_overlap": round(overlap_front, 2)
    }

class CalculadoraDialog(QDialog):
    def __init__(self, iface):
        super().__init__()
        self.iface = iface
        self.setWindowTitle("GSD Calculator")
        layout = QVBoxLayout()

       
        self.combo = QComboBox()
        self.altitude = QLineEdit("100")
        self.perc_lat = QLineEdit("70")
        self.perc_front = QLineEdit("80")
        self.spacing_lines = QLineEdit("20")
        self.spacing_photos = QLineEdit("10")
        self.orientation = QComboBox()
        self.orientation.addItems(["paisagem", "retrato"])

        try:
            path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'calculator', 'drone_data.json')
            with open(path, 'r', encoding='utf-8') as f:
                drone_data = json.load(f)
                for key in drone_data:
                    self.combo.addItem(key)
        except Exception as e:
            QMessageBox.warning(self, "Error", str(e))

        self.output = QLabel("Results will appear here")
        btn = QPushButton("Calculate")
        btn.clicked.connect(self.run_calculations)

        layout.addRow("Drone model:", self.combo)
        layout.addRow("Altitude (m):", self.altitude)
        layout.addRow("% Lateral Overlap:", self.perc_lat)
        layout.addRow("% Frontal Overlap:", self.perc_front)
        layout.addRow("Line Spacing (m):", self.spacing_lines)
        layout.addRow("Photo Spacing (m):", self.spacing_photos)
        layout.addRow("Orientation:", self.orientation)
        layout.addRow(btn)
        layout.addRow(self.output)
        
        self.setLayout(layout)
        
    def run_calculations(self):
        try:
            drone = self.combo.currentText()
            alt = float(self.altitude.text().replace(',', '.'))
            perc_lat = float(self.perc_lat.text().replace(',', '.'))
            perc_front = float(self.perc_front.text().replace(',', '.'))
            spacing_lines = float(self.spacing_lines.text().replace(',', '.'))
            spacing_photos = float(self.spacing_photos.text().replace(',', '.'))
            orient = self.orientation.currentText()

            gsd = calculate_gsd_by_sensor(drone, alt)
            spacing = calculate_spacing(drone, alt, perc_lat, perc_front, orient)
            overlap = calculate_overlap(drone, alt, spacing_lines, spacing_photos, orient)

            result = f"GSD: {gsd:.2f} cm/pixel\n"
            result += f"Spacing - Lat: {spacing['lateral_spacing']} m, Front: {spacing['frontal_spacing']} m\n"
            result += f"Overlap - Lat: {overlap['lateral_overlap']}%, Front: {overlap['frontal_overlap']}%"
            self.output.setText(result)
        except Exception as e:
            self.output.setText(f"Error: {e}")

class GsdCalculatorPlugin:
    def __init__(self, iface):
        self.iface = iface
        self.action = None
        self.dialog = None

    def initGui(self):
        self.action = QAction("GSD Calculator", self.iface.mainWindow())
        self.action.triggered.connect(self.show_dialog)
        self.iface.addPluginToMenu("&GSD Tools", self.action)

    def unload(self):
        self.iface.removePluginMenu("&GSD Tools", self.action)

    def show_dialog(self):
        if not self.dialog:
            self.dialog = GsdCalculatorDialog()
        self.dialog.show()
        self.dialog.raise_()
        self.dialog.activateWindow()